// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'regex.dart';

// **************************************************************************
// Generator: AnnotationBuilder
// **************************************************************************

///   This File is Generated by Dart Mem Annotation Generator
///   [AppRegex] Annotated with [Mem] with [all] mode
///   Including:
///     Model Class, Entity Class and Mapper Class,
///     Model Classes includes [toJson] and [fromJson] functions, and Entity Classes are not!
///     Mappers will convert every filed in the class including [SubClasses], they should be annotated as well.
///     [Mem] Annotation will generate all these fields for all Classes, so all subclasses should decorated with annotation to generate model, entity and mapper to use them here
///     [Enums] also supported and they will be detected and count into account for mappers and also json conversion
///     Classes are decorated with [Freezed], other functions will generate with [Freezed]

///   Details:
///     Class: AppRegex
///     Constructors Count: 1
///     Variables Count: 2

///   ==> Model Class:
@Freezed(toJson: true, fromJson: true)
class AppRegexModel with _$AppRegexModel {
  const factory AppRegexModel({
    final String? regexValue,
    final bool? isExceptionOfFormatting,
  }) = _AppRegexModel;

  factory AppRegexModel.fromJson(Map<String, dynamic> json) =>
      _$AppRegexModelFromJson(json);
}

///   ==> Entity Class:
@Freezed(toJson: false, fromJson: false)
class AppRegexEntity with _$AppRegexEntity {
  const factory AppRegexEntity({
    final String? regexValue,
    final bool? isExceptionOfFormatting,
  }) = _AppRegexEntity;
}

///   ==> Mapper Classes:
///   ==> Entity to Model Mapper Extension
extension MapperExtensionOnAppRegexEntity on AppRegexEntity {
  AppRegexModel get mapper => AppRegexModel(
        regexValue: regexValue,
        isExceptionOfFormatting: isExceptionOfFormatting,
      );
}

///   ==> Model to Entity Mapper Extension
extension MapperExtensionOnAppRegexModel on AppRegexModel {
  AppRegexEntity get mapper => AppRegexEntity(
        regexValue: regexValue,
        isExceptionOfFormatting: isExceptionOfFormatting,
      );
}

///   This File is Generated by Dart Mem Annotation Generator
///   [AppRegexList] Annotated with [Mem] with [all] mode
///   Including:
///     Model Class, Entity Class and Mapper Class,
///     Model Classes includes [toJson] and [fromJson] functions, and Entity Classes are not!
///     Mappers will convert every filed in the class including [SubClasses], they should be annotated as well.
///     [Mem] Annotation will generate all these fields for all Classes, so all subclasses should decorated with annotation to generate model, entity and mapper to use them here
///     [Enums] also supported and they will be detected and count into account for mappers and also json conversion
///     Classes are decorated with [Freezed], other functions will generate with [Freezed]

///   Details:
///     Class: AppRegexList
///     Constructors Count: 1
///     Variables Count: 1

///   ==> Model Class:
@Freezed(toJson: true, fromJson: true)
class AppRegexListModel with _$AppRegexListModel {
  const factory AppRegexListModel({
    final List<AppRegexModel>? regexesListModel,
  }) = _AppRegexListModel;

  factory AppRegexListModel.fromJson(Map<String, dynamic> json) =>
      _$AppRegexListModelFromJson(json);
}

///   ==> Entity Class:
@Freezed(toJson: false, fromJson: false)
class AppRegexListEntity with _$AppRegexListEntity {
  const factory AppRegexListEntity({
    final List<AppRegexEntity>? regexesListEntity,
  }) = _AppRegexListEntity;
}

///   ==> Mapper Classes:
///   ==> Entity to Model Mapper Extension
extension MapperExtensionOnAppRegexListEntity on AppRegexListEntity {
  AppRegexListModel get mapper => AppRegexListModel(
        regexesListModel: regexesListEntity?.map((e) => e.mapper).toList(),
      );
}

///   ==> Model to Entity Mapper Extension
extension MapperExtensionOnAppRegexListModel on AppRegexListModel {
  AppRegexListEntity get mapper => AppRegexListEntity(
        regexesListEntity: regexesListModel?.map((e) => e.mapper).toList(),
      );
}
