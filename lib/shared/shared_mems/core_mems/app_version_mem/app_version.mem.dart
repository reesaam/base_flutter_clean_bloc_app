// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'app_version.dart';

// **************************************************************************
// Generator: AnnotationBuilder
// **************************************************************************

///   This File is Generated by Dart Mem Annotation Generator
///   [AppVersion] Annotated with [Mem] with [all] mode
///   Including:
///     Model Class, Entity Class and Mapper Class,
///     Model Classes includes [toJson] and [fromJson] functions, and Entity Classes are not!
///     Mappers will convert every filed in the class including [SubClasses], they should be annotated as well.
///     [Mem] Annotation will generate all these fields for all Classes, so all subclasses should decorated with annotation to generate model, entity and mapper to use them here
///     [Enums] also supported and they will be detected and count into account for mappers and also json conversion
///     Classes are decorated with [Freezed], other functions will generate with [Freezed]

///   Details:
///     Class: AppVersion
///     Constructors Count: 1
///     Variables Count: 4

///   ==> Model Class:
@Freezed(toJson: true, fromJson: true)
class AppVersionModel with _$AppVersionModel {
  const factory AppVersionModel({
    final String? version,
    final List<String>? changes,
    @JsonEnum() final AppVersionTypes? versionType,
    final bool? isForceUpdate,
  }) = _AppVersionModel;

  factory AppVersionModel.fromJson(Map<String, dynamic> json) =>
      _$AppVersionModelFromJson(json);
}

///   ==> Entity Class:
@Freezed(toJson: false, fromJson: false)
class AppVersionEntity with _$AppVersionEntity {
  const factory AppVersionEntity({
    final String? version,
    final List<String>? changes,
    @JsonEnum() final AppVersionTypes? versionType,
    final bool? isForceUpdate,
  }) = _AppVersionEntity;
}

///   ==> Mapper Classes:
///   ==> Entity to Model Mapper Extension
extension MapperExtensionOnAppVersionEntity on AppVersionEntity {
  AppVersionModel get mapper => AppVersionModel(
        version: version,
        changes: changes,
        versionType: versionType,
        isForceUpdate: isForceUpdate,
      );
}

///   ==> Model to Entity Mapper Extension
extension MapperExtensionOnAppVersionModel on AppVersionModel {
  AppVersionEntity get mapper => AppVersionEntity(
        version: version,
        changes: changes,
        versionType: versionType,
        isForceUpdate: isForceUpdate,
      );
}

///   This File is Generated by Dart Mem Annotation Generator
///   [AppVersionList] Annotated with [Mem] with [all] mode
///   Including:
///     Model Class, Entity Class and Mapper Class,
///     Model Classes includes [toJson] and [fromJson] functions, and Entity Classes are not!
///     Mappers will convert every filed in the class including [SubClasses], they should be annotated as well.
///     [Mem] Annotation will generate all these fields for all Classes, so all subclasses should decorated with annotation to generate model, entity and mapper to use them here
///     [Enums] also supported and they will be detected and count into account for mappers and also json conversion
///     Classes are decorated with [Freezed], other functions will generate with [Freezed]

///   Details:
///     Class: AppVersionList
///     Constructors Count: 1
///     Variables Count: 1

///   ==> Model Class:
@Freezed(toJson: true, fromJson: true)
class AppVersionListModel with _$AppVersionListModel {
  const factory AppVersionListModel({
    final List<AppVersionModel>? versionListModel,
  }) = _AppVersionListModel;

  factory AppVersionListModel.fromJson(Map<String, dynamic> json) =>
      _$AppVersionListModelFromJson(json);
}

///   ==> Entity Class:
@Freezed(toJson: false, fromJson: false)
class AppVersionListEntity with _$AppVersionListEntity {
  const factory AppVersionListEntity({
    final List<AppVersionEntity>? versionListEntity,
  }) = _AppVersionListEntity;
}

///   ==> Mapper Classes:
///   ==> Entity to Model Mapper Extension
extension MapperExtensionOnAppVersionListEntity on AppVersionListEntity {
  AppVersionListModel get mapper => AppVersionListModel(
        versionListModel: versionListEntity?.map((e) => e.mapper).toList(),
      );
}

///   ==> Model to Entity Mapper Extension
extension MapperExtensionOnAppVersionListModel on AppVersionListModel {
  AppVersionListEntity get mapper => AppVersionListEntity(
        versionListEntity: versionListModel?.map((e) => e.mapper).toList(),
      );
}
