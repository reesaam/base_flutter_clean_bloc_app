// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'app_setting_data.dart';

// **************************************************************************
// Generator: AnnotationBuilder
// **************************************************************************

///   This File is Generated by Dart Mem Annotation Generator
///   [AppSettingData] Annotated with [Mem] with [all] mode
///   Including:
///     Model Class, Entity Class and Mapper Class,
///     Model Classes includes [toJson] and [fromJson] functions, and Entity Classes are not!
///     Mappers will convert every filed in the class including [SubClasses], they should be annotated as well.
///     [Mem] Annotation will generate all these fields for all Classes, so all subclasses should decorated with annotation to generate model, entity and mapper to use them here
///     [Enums] also supported and they will be detected and count into account for mappers and also json conversion
///     Classes are decorated with [Freezed], other functions will generate with [Freezed]

///   Details:
///     Class: AppSettingData
///     Constructors Count: 1
///     Variables Count: 3

///   ==> Model Class:
@Freezed(toJson: true, fromJson: true)
class AppSettingDataModel with _$AppSettingDataModel {
  const factory AppSettingDataModel({
    final bool? darkMode,
    @JsonEnum() final AppLanguages? language,
    @JsonEnum() final AppCountry? country,
  }) = _AppSettingDataModel;

  factory AppSettingDataModel.fromJson(Map<String, dynamic> json) =>
      _$AppSettingDataModelFromJson(json);
}

///   ==> Entity Class:
@Freezed(toJson: false, fromJson: false)
class AppSettingDataEntity with _$AppSettingDataEntity {
  const factory AppSettingDataEntity({
    final bool? darkMode,
    @JsonEnum() final AppLanguages? language,
    @JsonEnum() final AppCountry? country,
  }) = _AppSettingDataEntity;
}

///   ==> Mapper Classes:
///   ==> Entity to Model Mapper Extension
extension MapperExtensionOnAppSettingDataEntity on AppSettingDataEntity {
  AppSettingDataModel get mapper => AppSettingDataModel(
        darkMode: darkMode,
        language: language,
        country: country,
      );
}

///   ==> Model to Entity Mapper Extension
extension MapperExtensionOnAppSettingDataModel on AppSettingDataModel {
  AppSettingDataEntity get mapper => AppSettingDataEntity(
        darkMode: darkMode,
        language: language,
        country: country,
      );
}
