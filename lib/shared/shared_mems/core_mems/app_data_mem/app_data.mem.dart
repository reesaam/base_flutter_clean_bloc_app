// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'app_data.dart';

// **************************************************************************
// Generator: AnnotationBuilder
// **************************************************************************

///   This File is Generated by Dart Mem Annotation Generator
///   [AppData] Annotated with [Mem] with [all] mode
///   Including:
///     Model Class, Entity Class and Mapper Class,
///     Model Classes includes [toJson] and [fromJson] functions, and Entity Classes are not!
///     Mappers will convert every filed in the class including [SubClasses], they should be annotated as well.
///     [Mem] Annotation will generate all these fields for all Classes, so all subclasses should decorated with annotation to generate model, entity and mapper to use them here
///     [Enums] also supported and they will be detected and count into account for mappers and also json conversion
///     Classes are decorated with [Freezed], other functions will generate with [Freezed]

///   Details:
///     Class: AppData
///     Constructors Count: 1
///     Variables Count: 4

///   ==> Model Class:
@Freezed(toJson: true, fromJson: true)
class AppDataModel with _$AppDataModel {
  const factory AppDataModel({
    @JsonEnum() final AppDataVersions? dataVersion,
    final AppVersionListModel? appVersionsModel,
    final AppSettingDataModel? settingsModel,
    final AppStatisticsDataModel? statisticsDataModel,
  }) = _AppDataModel;

  factory AppDataModel.fromJson(Map<String, dynamic> json) =>
      _$AppDataModelFromJson(json);
}

///   ==> Entity Class:
@Freezed(toJson: false, fromJson: false)
class AppDataEntity with _$AppDataEntity {
  const factory AppDataEntity({
    @JsonEnum() final AppDataVersions? dataVersion,
    final AppVersionListEntity? appVersionsEntity,
    final AppSettingDataEntity? settingsEntity,
    final AppStatisticsDataEntity? statisticsDataEntity,
  }) = _AppDataEntity;
}

///   ==> Mapper Classes:
///   ==> Entity to Model Mapper Extension
extension MapperExtensionOnAppDataEntity on AppDataEntity {
  AppDataModel get mapper => AppDataModel(
        dataVersion: dataVersion,
        appVersionsModel: appVersionsEntity?.mapper,
        settingsModel: settingsEntity?.mapper,
        statisticsDataModel: statisticsDataEntity?.mapper,
      );
}

///   ==> Model to Entity Mapper Extension
extension MapperExtensionOnAppDataModel on AppDataModel {
  AppDataEntity get mapper => AppDataEntity(
        dataVersion: dataVersion,
        appVersionsEntity: appVersionsModel?.mapper,
        settingsEntity: settingsModel?.mapper,
        statisticsDataEntity: statisticsDataModel?.mapper,
      );
}
